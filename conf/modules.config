/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

// Input file handling

// user has only vcf    = meta.bgzip_vcf & meta.tabix_vcf will be true.
// user has only vcf.gz = meta.tabix_vcf will be true and meta.bgzip_vcf will not exist.

process{
    withName: TABIX_BGZIPTABIX {
        ext.when = { meta.bgzip_vcf && meta.tabix_vcf == true }
        publishDir = [
            path: { "${params.outdir}/preprocessing/tabix" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }
    withName: TABIX_TABIX {
        ext.when = { meta.tabix_vcf == true && meta.bgzip_vcf == false }
        publishDir = [
            path: { "${params.outdir}/preprocessing/tabix" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }
    withName: FORMAT_CNA {
        ext.when = { params.cna_analysis }
    }
    withName: BCFTOOLS_NORM {
        ext.when = { params.mode.toLowerCase() == 'pcgr' }
        ext.args = [ "",
            "-m",
            "-both"
        ].join(" ").trim()
        publishDir = [
            path: { "${params.outdir}/preprocessing/bcftools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }
    withName: BCFTOOLS_FILTER {
        ext.when = { params.mode.toLowerCase() == 'pcgr' }
        ext.args = { "-e'FORMAT/DP=\".\" || FORMAT/DP<1'" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/bcftools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }
}


// PCGR/CPSR


process{
    withName: PCGR {
        ext.when     = { params.mode.toLowerCase() == 'pcgr' }
        ext.genome   = { params.genome.toLowerCase() }
        ext.database = { params.database }
        ext.args     = {
            [
            // PCGR params
            params.tumor_site     ? "--tumor_site ${params.tumor_site}" : "",
            params.assay          ? "--assay ${params.assay}" : "",
            params.cpsr_report    ? "--cpsr_report ${params.cpsr_report}" : "",
            params.tumor_purity   ? "--tumor_purity ${params.tumor_purity}" : "",
            params.tumor_ploidy   ? "--tumor_ploidy ${params.tumor_ploidy}" : "",
            params.include_trials ? "--include_trials" : "",

            // VCF INFO tags
            params.tumor_dp_tag   ? "--tumor_dp_tag ${params.tumor_dp_tag}" : "",
            params.tumor_af_tag   ? "--tumor_af_tag ${params.tumor_af_tag}" : "",
            params.control_dp_tag ? "--control_dp_tag ${params.control_dp_tag}" : "",
            params.control_af_tag ? "--control_af_tag ${params.control_af_tag}" : "",
            params.call_conf_tag  ? "--call_conf_tag ${params.call_conf_tag}" : "",
            params.tumor_dp_min   ? "--tumor_dp_min ${params.tumor_dp_min}" : "",
            params.tumor_af_min   ? "--tumor_af_min ${params.tumor_af_min}" : "",
            params.control_dp_min ? "--control_dp_min ${params.control_dp_min}" : "",
            params.control_af_max ? "--control_af_max ${params.control_af_max}" : "",

            // Copy Number Alteration
            (params.cna_analysis && params.logr_gain)       ? "--logr_gain ${params.logr_gain}" : "",
            (params.cna_analysis && params.logr_homdel)     ? "--logr_homdel ${params.logr_homdel}" : "",
            (params.cna_analysis && params.cna_overlap_pct) ? "--cna_overlap_pct ${params.cna_overlap_pct}" : "",

            // Tumor mutational burden
            params.estimate_tmb                            ? "--estimate_tmb" : "",
            params.estimate_msi_status                     ? "--estimate_msi_status" : "",
            (params.estimate_tmb && params.target_size_mb) ? "--target_size_mb ${params.target_size_mb}" : "",
            (params.tmb_algorithm && params.estimate_tmb)  ? "--tmb_algorithm ${params.tmb_algorithm}" : "",

            // Mutational signatures
            params.estimate_signatures                                             ? "--estimate_signatures" : "",
            (params.estimate_signatures && params.min_mutations_signatures)        ? "--min_mutations_signatures ${params.min_mutations_signatures}" : "",
            (params.estimate_signatures && params.all_reference_signatures)        ? "--all_reference_signatures" : "",
            (params.estimate_signatures && params.include_artefact_signatures)     ? "--include_artefact_signatures" : "",
            (params.estimate_signatures && params.prevalence_reference_signatures) ? "--prevalence_reference_signatures ${params.prevalence_reference_signatures}" : "",

            // Tumor only
            params.tumor_only                               ? "--tumor_only" : "",
            (params.tumor_only && params.cell_line)         ? "--cell_line" : "",
            (params.tumor_only && params.maf_onekg_afr)     ? "--maf_onekg_afr ${params.maf_onekg_afr}" : "",
            (params.tumor_only && params.maf_onekg_amr)     ? "--maf_onekg_amr ${params.maf_onekg_amr}" : "",
            (params.tumor_only && params.maf_onekg_eas)     ? "--maf_onekg_eas ${params.maf_onekg_eas}" : "",
            (params.tumor_only && params.maf_onekg_eur)     ? "--maf_onekg_eur ${params.maf_onekg_eur}" : "",
            (params.tumor_only && params.maf_onekg_sas)     ? "--maf_onekg_sas ${params.maf_onekg_sas}" : "",
            (params.tumor_only && params.maf_onekg_global)  ? "--maf_onekg_global ${params.maf_onekg_global}" : "",
            (params.tumor_only && params.maf_gnomad_afr)    ? "--maf_gnomad_afr ${params.maf_gnomad_afr}" : "",
            (params.tumor_only && params.maf_gnomad_amr)    ? "--maf_gnomad_amr ${params.maf_gnomad_amr}" : "",
            (params.tumor_only && params.maf_gnomad_asj)    ? "--maf_gnomad_asj ${params.maf_gnomad_asj}" : "",
            (params.tumor_only && params.maf_gnomad_eas)    ? "--maf_gnomad_eas ${params.maf_gnomad_eas}" : "",
            (params.tumor_only && params.maf_gnomad_global) ? "--maf_gnomad_global ${params.maf_gnomad_global}" : "",
            (params.tumor_only && params.maf_gnomad_nfe)    ? "--maf_gnomad_nfe ${params.maf_gnomad_nfe}" : "",
            (params.tumor_only && params.maf_gnomad_oth)    ? "--maf_gnomad_oth ${params.maf_gnomad_oth}" : "",
            (params.tumor_only && params.maf_gnomad_sas)    ? "--maf_gnomad_sas ${params.maf_gnomad_sas}" : "",

            // VEP params
            params.vep_n_forks       ? "--vep_n_forks ${params.vep_n_forks}" : "",
            params.vep_buffer_size   ? "--vep_buffer_size ${params.vep_buffer_size}" : "",
            params.vep_gencode_all   ? "--vep_gencode_all" : "",
            params.vep_pick_order    ? "--vep_pick_order ${params.vep_pick_order}" : "",
            params.vep_no_intergenic ? "--vep_no_intergenic" : ""
            ].join(" ").trim()
        }
        publishDir = [
            path: { "${params.outdir}/pcgr" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: FORMAT_VCF {
        ext.when = { params.mode.toLowerCase() == 'pcgr' }
        publishDir = [
            path: { "${params.outdir}/preprocessing/reformat" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }


    withName: FORMAT_CNA {
        ext.when = { params.cna_analysis && params.mode.toLowerCase() == 'pcgr' }
        publishDir = [
            path: { "${params.outdir}/preprocessing/reformat" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }
}


process{
    withName: CPSR {
        ext.when     = { params.mode.toLowerCase() == 'cpsr' }
        ext.genome   = { params.genome.toLowerCase() }
        ext.database = { params.database }
        ext.args     = [ "",
            // CPSR params
            "--panel_id ${params.panel_id}",
            params.no_vcf_validate          ? "--no_vcf_validate" : "",
            params.diagnostic_grade_only    ? "--diagnostic_grade_only" : "",
            params.ignore_noncoding         ? "--ignore_noncoding" : "",
            params.pop_gnomad               ? "--pop_gnomad ${params.pop_gnomad}" : "",
            params.maf_upper_threshold      ? "--maf_upper_threshold ${params.maf_upper_threshold}" : "",
            params.classify_all             ? "--classify_all" : "",
            params.clinvar_ignore_noncancer ? "--clinvar_ignore_noncancer" : "",

            // VEP params
            params.vep_n_forks              ? "--vep_n_forks ${params.vep_n_forks}" : "",
            params.vep_buffer_size          ? "--vep_buffer_size ${params.vep_buffer_size}" : "",
            params.vep_gencode_all          ? "--vep_gencode_all" : "",
            params.vep_pick_order           ? "--vep_pick_order ${params.vep_pick_order}" : "",
            params.vep_no_intergenic        ? "--vep_no_intergenic" : ""
        ].join(" ").trim()
        publishDir = [
            path: { "${params.outdir}/cpsr" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}



